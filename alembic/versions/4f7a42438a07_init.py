"""init

Revision ID: 4f7a42438a07
Revises: 
Create Date: 2024-08-19 16:10:40.161766

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4f7a42438a07'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cleaning',
    sa.Column('type', sa.Enum('CENTRAL_NOZZLE', 'ADDITIONAL_NOZZLE', 'CHANNEL', name='cleaningtype'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('defect',
    sa.Column('type', sa.Enum('DEFORMATIONS', 'POROSITY', 'UNFUSED', 'UNDERCUTS', 'CRACKS', 'BURNTHROUGH', name='defecttype'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('diffuser',
    sa.Column('diffuser_thread', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('gasprotectionviolation',
    sa.Column('type', sa.Enum('LOW_GAS_PRESSURE', 'LOW_GAS_FLOW', name='gasprotectionviolationtype'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('gaz',
    sa.Column('gaz_name', sa.String(), nullable=True),
    sa.Column('gaz_type_obj', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('intestine',
    sa.Column('intestine_color', sa.String(), nullable=False),
    sa.Column('intestine_diameter', sa.String(), nullable=False),
    sa.Column('intestine_length', sa.Float(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('mechanicalfault',
    sa.Column('type', sa.Enum('FAULT_1', 'FAULT_2', name='mechanicalfaulttype'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('modedeviation',
    sa.Column('type', sa.Enum('WELDING_CONTROL', 'STABILITY_VIOLATION', 'ARC_IGNITION_ERROR', name='modedeviationtype'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('mudguard',
    sa.Column('mudguard_matireal', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('nozzle',
    sa.Column('nozzle_form', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('programerror',
    sa.Column('type', sa.Enum('COLLISION', 'GEOMETRY_MISMATCH', 'PREMATURE_END', 'CONTROLLER_ERROR', name='programerrortype'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rolls',
    sa.Column('rolls_cutout_type', sa.String(), nullable=False),
    sa.Column('rolls_color', sa.String(), nullable=False),
    sa.Column('rolls_ware_dim', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('setting',
    sa.Column('type', sa.Enum('UTOOL', 'UFRAME', 'REGISTER', name='settingtype'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tip',
    sa.Column('tip_diameter', sa.Float(), nullable=False),
    sa.Column('tip_type', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('userwaamer',
    sa.Column('telegram_user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('surname', sa.String(), nullable=True),
    sa.Column('number_robot', sa.Integer(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('telegram_user_id')
    )
    op.create_table('wire',
    sa.Column('wire_mark', sa.String(), nullable=False),
    sa.Column('wire_diameter', sa.Float(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('change',
    sa.Column('changes_who', sa.Integer(), nullable=True),
    sa.Column('changes_what', sa.String(), nullable=False),
    sa.Column('changes_model_id', sa.Integer(), nullable=True),
    sa.Column('changes_time', sa.DateTime(), nullable=True),
    sa.Column('changes_robot', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['changes_who'], ['userwaamer.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event',
    sa.Column('robot_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('message', sa.String(), nullable=True),
    sa.Column('user_message', sa.String(), nullable=True),
    sa.Column('event_type', sa.Enum('CLEANING', 'SETTING', 'DEFECT', 'MECHANICAL_FAULT', 'PROGRAM_ERROR', 'MODE_DEVIATION', 'GAS_PROTECTION_VIOLATION', name='eventtype'), nullable=False),
    sa.Column('datarime', sa.DateTime(), nullable=True),
    sa.Column('cleaning_id', sa.Integer(), nullable=True),
    sa.Column('setting_id', sa.Integer(), nullable=True),
    sa.Column('defect_id', sa.Integer(), nullable=True),
    sa.Column('mechanical_fault_id', sa.Integer(), nullable=True),
    sa.Column('program_error_id', sa.Integer(), nullable=True),
    sa.Column('mode_deviation_id', sa.Integer(), nullable=True),
    sa.Column('gas_protection_violation_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['cleaning_id'], ['cleaning.id'], ),
    sa.ForeignKeyConstraint(['defect_id'], ['defect.id'], ),
    sa.ForeignKeyConstraint(['gas_protection_violation_id'], ['gasprotectionviolation.id'], ),
    sa.ForeignKeyConstraint(['mechanical_fault_id'], ['mechanicalfault.id'], ),
    sa.ForeignKeyConstraint(['mode_deviation_id'], ['modedeviation.id'], ),
    sa.ForeignKeyConstraint(['program_error_id'], ['programerror.id'], ),
    sa.ForeignKeyConstraint(['setting_id'], ['setting.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['userwaamer.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('robot',
    sa.Column('robot_number', sa.Integer(), nullable=True),
    sa.Column('robot_wire_id', sa.Integer(), nullable=False),
    sa.Column('robot_last_update_wire', sa.DateTime(), nullable=True),
    sa.Column('robot_gaz_id', sa.Integer(), nullable=False),
    sa.Column('robot_last_update_gaz', sa.DateTime(), nullable=True),
    sa.Column('robot_add_gaz_id', sa.Integer(), nullable=True),
    sa.Column('robot_last_update_add_gaz', sa.DateTime(), nullable=True),
    sa.Column('robot_tip_id', sa.Integer(), nullable=False),
    sa.Column('robot_last_update_tip', sa.DateTime(), nullable=True),
    sa.Column('robot_rolls_id', sa.Integer(), nullable=False),
    sa.Column('robot_last_update_rolls', sa.DateTime(), nullable=True),
    sa.Column('robot_intestine_id', sa.Integer(), nullable=False),
    sa.Column('robot_last_update_intestine', sa.DateTime(), nullable=True),
    sa.Column('robot_diffuser_id', sa.Integer(), nullable=True),
    sa.Column('robot_last_update_diffuser', sa.DateTime(), nullable=True),
    sa.Column('robot_mudguard_id', sa.Integer(), nullable=True),
    sa.Column('robot_last_update_mudguard', sa.DateTime(), nullable=True),
    sa.Column('robot_nozzle_id', sa.Integer(), nullable=True),
    sa.Column('robot_last_update_nozzle', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['robot_add_gaz_id'], ['gaz.id'], ),
    sa.ForeignKeyConstraint(['robot_diffuser_id'], ['diffuser.id'], ),
    sa.ForeignKeyConstraint(['robot_gaz_id'], ['gaz.id'], ),
    sa.ForeignKeyConstraint(['robot_intestine_id'], ['intestine.id'], ),
    sa.ForeignKeyConstraint(['robot_mudguard_id'], ['mudguard.id'], ),
    sa.ForeignKeyConstraint(['robot_nozzle_id'], ['nozzle.id'], ),
    sa.ForeignKeyConstraint(['robot_rolls_id'], ['rolls.id'], ),
    sa.ForeignKeyConstraint(['robot_tip_id'], ['tip.id'], ),
    sa.ForeignKeyConstraint(['robot_wire_id'], ['wire.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('robot')
    op.drop_table('event')
    op.drop_table('change')
    op.drop_table('wire')
    op.drop_table('userwaamer')
    op.drop_table('tip')
    op.drop_table('setting')
    op.drop_table('rolls')
    op.drop_table('programerror')
    op.drop_table('nozzle')
    op.drop_table('mudguard')
    op.drop_table('modedeviation')
    op.drop_table('mechanicalfault')
    op.drop_table('intestine')
    op.drop_table('gaz')
    op.drop_table('gasprotectionviolation')
    op.drop_table('diffuser')
    op.drop_table('defect')
    op.drop_table('cleaning')
    # ### end Alembic commands ###
